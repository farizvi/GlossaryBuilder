import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
/* tslint:disable:no-useless-cast */
let StyleService = class StyleService {
    setRowClass(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        const row = document.querySelector(selector);
        if (row) {
            row.classList.add(val.className);
        }
    }
    setCellClass(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        const cell = document.querySelector(selector);
        if (cell) {
            cell.classList.add(val.className);
        }
    }
    setRowStyle(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row})`;
        const row = document.querySelector(selector);
        if (row) {
            // tslint:disable-next-line:no-string-literal
            row.style[val.attr] = val.value;
        }
    }
    setCellStyle(val) {
        const selector = `#table > tbody > tr:nth-child(${val.row}) > td:nth-child(${val.cell})`;
        const cell = document.querySelector(selector);
        if (cell) {
            // tslint:disable-next-line:no-string-literal
            cell.style[val.attr] = val.value;
        }
    }
    pinnedWidth(pinned, column) {
        if (pinned) {
            return 150 * column + 'px';
        }
    }
};
StyleService = __decorate([
    Injectable()
], StyleService);
export { StyleService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1lYXN5LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0eWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0Msb0NBQW9DO0FBRXBDLElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFDaEIsV0FBVyxDQUFDLEdBQWE7UUFDOUIsTUFBTSxRQUFRLEdBQUcsaUNBQWlDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM3RCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBd0IsQ0FBQztRQUNwRSxJQUFJLEdBQUcsRUFBRTtZQUNQLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFTSxZQUFZLENBQUMsR0FBYztRQUNoQyxNQUFNLFFBQVEsR0FBRyxpQ0FBaUMsR0FBRyxDQUFDLEdBQUcsb0JBQW9CLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUN6RixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBeUIsQ0FBQztRQUN0RSxJQUFJLElBQUksRUFBRTtZQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7SUFFTSxXQUFXLENBQUMsR0FBYTtRQUM5QixNQUFNLFFBQVEsR0FBRyxpQ0FBaUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzdELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUF3QixDQUFDO1FBQ3BFLElBQUksR0FBRyxFQUFFO1lBQ1AsNkNBQTZDO1lBQzdDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRU0sWUFBWSxDQUFDLEdBQWM7UUFDaEMsTUFBTSxRQUFRLEdBQUcsaUNBQWlDLEdBQUcsQ0FBQyxHQUFHLG9CQUFvQixHQUFHLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDekYsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXlCLENBQUM7UUFDdEUsSUFBSSxJQUFJLEVBQUU7WUFDUiw2Q0FBNkM7WUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztTQUNsQztJQUNILENBQUM7SUFFTSxXQUFXLENBQUMsTUFBZSxFQUFFLE1BQWM7UUFDaEQsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLEdBQUcsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztDQUNGLENBQUE7QUF4Q1ksWUFBWTtJQUR4QixVQUFVLEVBQUU7R0FDQSxZQUFZLENBd0N4QjtTQXhDWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2VsbENsYXNzLCBDZWxsU3R5bGUsIFJvd0NsYXNzLCBSb3dTdHlsZSB9IGZyb20gJy4uJztcblxuLyogdHNsaW50OmRpc2FibGU6bm8tdXNlbGVzcy1jYXN0ICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3R5bGVTZXJ2aWNlIHtcbiAgcHVibGljIHNldFJvd0NsYXNzKHZhbDogUm93Q2xhc3MpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAjdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCgke3ZhbC5yb3d9KWA7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgYXMgSFRNTFRhYmxlUm93RWxlbWVudDtcbiAgICBpZiAocm93KSB7XG4gICAgICByb3cuY2xhc3NMaXN0LmFkZCh2YWwuY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0Q2VsbENsYXNzKHZhbDogQ2VsbENsYXNzKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSkgPiB0ZDpudGgtY2hpbGQoJHt2YWwuY2VsbH0pYDtcbiAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCh2YWwuY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0Um93U3R5bGUodmFsOiBSb3dTdHlsZSk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pYDtcbiAgICBjb25zdCByb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSBhcyBIVE1MVGFibGVSb3dFbGVtZW50O1xuICAgIGlmIChyb3cpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgICAgcm93LnN0eWxlW3ZhbC5hdHRyXSA9IHZhbC52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0Q2VsbFN0eWxlKHZhbDogQ2VsbFN0eWxlKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSkgPiB0ZDpudGgtY2hpbGQoJHt2YWwuY2VsbH0pYDtcbiAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgICAgY2VsbC5zdHlsZVt2YWwuYXR0cl0gPSB2YWwudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHBpbm5lZFdpZHRoKHBpbm5lZDogYm9vbGVhbiwgY29sdW1uOiBudW1iZXIpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChwaW5uZWQpIHtcbiAgICAgIHJldHVybiAxNTAgKiBjb2x1bW4gKyAncHgnO1xuICAgIH1cbiAgfVxufVxuIl19