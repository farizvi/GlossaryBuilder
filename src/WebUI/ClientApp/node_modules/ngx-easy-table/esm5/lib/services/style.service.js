import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
/* tslint:disable:no-useless-cast */
var StyleService = /** @class */ (function () {
    function StyleService() {
    }
    StyleService.prototype.setRowClass = function (val) {
        var selector = "#table > tbody > tr:nth-child(" + val.row + ")";
        var row = document.querySelector(selector);
        if (row) {
            row.classList.add(val.className);
        }
    };
    StyleService.prototype.setCellClass = function (val) {
        var selector = "#table > tbody > tr:nth-child(" + val.row + ") > td:nth-child(" + val.cell + ")";
        var cell = document.querySelector(selector);
        if (cell) {
            cell.classList.add(val.className);
        }
    };
    StyleService.prototype.setRowStyle = function (val) {
        var selector = "#table > tbody > tr:nth-child(" + val.row + ")";
        var row = document.querySelector(selector);
        if (row) {
            // tslint:disable-next-line:no-string-literal
            row.style[val.attr] = val.value;
        }
    };
    StyleService.prototype.setCellStyle = function (val) {
        var selector = "#table > tbody > tr:nth-child(" + val.row + ") > td:nth-child(" + val.cell + ")";
        var cell = document.querySelector(selector);
        if (cell) {
            // tslint:disable-next-line:no-string-literal
            cell.style[val.attr] = val.value;
        }
    };
    StyleService.prototype.pinnedWidth = function (pinned, column) {
        if (pinned) {
            return 150 * column + 'px';
        }
    };
    StyleService = __decorate([
        Injectable()
    ], StyleService);
    return StyleService;
}());
export { StyleService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1lYXN5LXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0eWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0Msb0NBQW9DO0FBRXBDO0lBQUE7SUF3Q0EsQ0FBQztJQXZDUSxrQ0FBVyxHQUFsQixVQUFtQixHQUFhO1FBQzlCLElBQU0sUUFBUSxHQUFHLG1DQUFpQyxHQUFHLENBQUMsR0FBRyxNQUFHLENBQUM7UUFDN0QsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXdCLENBQUM7UUFDcEUsSUFBSSxHQUFHLEVBQUU7WUFDUCxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRU0sbUNBQVksR0FBbkIsVUFBb0IsR0FBYztRQUNoQyxJQUFNLFFBQVEsR0FBRyxtQ0FBaUMsR0FBRyxDQUFDLEdBQUcseUJBQW9CLEdBQUcsQ0FBQyxJQUFJLE1BQUcsQ0FBQztRQUN6RixJQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBeUIsQ0FBQztRQUN0RSxJQUFJLElBQUksRUFBRTtZQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7SUFFTSxrQ0FBVyxHQUFsQixVQUFtQixHQUFhO1FBQzlCLElBQU0sUUFBUSxHQUFHLG1DQUFpQyxHQUFHLENBQUMsR0FBRyxNQUFHLENBQUM7UUFDN0QsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXdCLENBQUM7UUFDcEUsSUFBSSxHQUFHLEVBQUU7WUFDUCw2Q0FBNkM7WUFDN0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztTQUNqQztJQUNILENBQUM7SUFFTSxtQ0FBWSxHQUFuQixVQUFvQixHQUFjO1FBQ2hDLElBQU0sUUFBUSxHQUFHLG1DQUFpQyxHQUFHLENBQUMsR0FBRyx5QkFBb0IsR0FBRyxDQUFDLElBQUksTUFBRyxDQUFDO1FBQ3pGLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUF5QixDQUFDO1FBQ3RFLElBQUksSUFBSSxFQUFFO1lBQ1IsNkNBQTZDO1lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRU0sa0NBQVcsR0FBbEIsVUFBbUIsTUFBZSxFQUFFLE1BQWM7UUFDaEQsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLEdBQUcsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQXZDVSxZQUFZO1FBRHhCLFVBQVUsRUFBRTtPQUNBLFlBQVksQ0F3Q3hCO0lBQUQsbUJBQUM7Q0FBQSxBQXhDRCxJQXdDQztTQXhDWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2VsbENsYXNzLCBDZWxsU3R5bGUsIFJvd0NsYXNzLCBSb3dTdHlsZSB9IGZyb20gJy4uJztcblxuLyogdHNsaW50OmRpc2FibGU6bm8tdXNlbGVzcy1jYXN0ICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3R5bGVTZXJ2aWNlIHtcbiAgcHVibGljIHNldFJvd0NsYXNzKHZhbDogUm93Q2xhc3MpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxlY3RvciA9IGAjdGFibGUgPiB0Ym9keSA+IHRyOm50aC1jaGlsZCgke3ZhbC5yb3d9KWA7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgYXMgSFRNTFRhYmxlUm93RWxlbWVudDtcbiAgICBpZiAocm93KSB7XG4gICAgICByb3cuY2xhc3NMaXN0LmFkZCh2YWwuY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0Q2VsbENsYXNzKHZhbDogQ2VsbENsYXNzKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSkgPiB0ZDpudGgtY2hpbGQoJHt2YWwuY2VsbH0pYDtcbiAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCh2YWwuY2xhc3NOYW1lKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0Um93U3R5bGUodmFsOiBSb3dTdHlsZSk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCN0YWJsZSA+IHRib2R5ID4gdHI6bnRoLWNoaWxkKCR7dmFsLnJvd30pYDtcbiAgICBjb25zdCByb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSBhcyBIVE1MVGFibGVSb3dFbGVtZW50O1xuICAgIGlmIChyb3cpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgICAgcm93LnN0eWxlW3ZhbC5hdHRyXSA9IHZhbC52YWx1ZTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0Q2VsbFN0eWxlKHZhbDogQ2VsbFN0eWxlKTogdm9pZCB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgI3RhYmxlID4gdGJvZHkgPiB0cjpudGgtY2hpbGQoJHt2YWwucm93fSkgPiB0ZDpudGgtY2hpbGQoJHt2YWwuY2VsbH0pYDtcbiAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgaWYgKGNlbGwpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgICAgY2VsbC5zdHlsZVt2YWwuYXR0cl0gPSB2YWwudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHBpbm5lZFdpZHRoKHBpbm5lZDogYm9vbGVhbiwgY29sdW1uOiBudW1iZXIpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChwaW5uZWQpIHtcbiAgICAgIHJldHVybiAxNTAgKiBjb2x1bW4gKyAncHgnO1xuICAgIH1cbiAgfVxufVxuIl19