import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ApiType, Columns, Config, Pagination } from '../..';
import { PaginationRange } from '../pagination/pagination.component';
import { StyleService } from '../../services/style.service';
import { Subject } from 'rxjs';
import { CdkVirtualScrollViewport, ScrollDispatcher } from '@angular/cdk/scrolling';
import * as ɵngcc0 from '@angular/core';
declare type ColumnKeyType = string | number | boolean;
interface RowContextMenuPosition {
    top: string | null;
    left: string | null;
    value: any | null;
}
export declare class BaseComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private readonly cdr;
    private readonly scrollDispatcher;
    readonly styleService: StyleService;
    private unsubscribe;
    selectedRow: number;
    selectedCol: number;
    term: any;
    filterCount: number;
    filteredCountSubject: Subject<number>;
    tableClass: string | null;
    globalSearchTerm: string;
    grouped: any;
    isSelected: boolean;
    page: number;
    count: number;
    sortState: Map<any, any>;
    sortKey: string | null;
    rowContextMenuPosition: RowContextMenuPosition;
    limit: any;
    sortBy: {
        key: string;
    } & {
        order: string;
    };
    selectedDetailsTemplateRowId: Set<number>;
    selectedCheckboxes: Set<number>;
    config: Config;
    configuration: Config;
    data: any[];
    pagination: Pagination;
    groupRowsBy: string;
    id: string;
    toggleRowIndex: any;
    detailsTemplate: TemplateRef<any>;
    summaryTemplate: TemplateRef<{
        total: number;
        limit: number;
        page: number;
    }>;
    groupRowsHeaderTemplate: TemplateRef<any>;
    filtersTemplate: TemplateRef<any>;
    selectAllTemplate: TemplateRef<any>;
    noResultsTemplate: TemplateRef<void>;
    loadingTemplate: TemplateRef<void>;
    additionalActionsTemplate: TemplateRef<void>;
    rowContextMenu: TemplateRef<any>;
    columns: Columns[];
    readonly event: EventEmitter<{
        event: string;
        value: any;
    }>;
    rowTemplate: TemplateRef<any>;
    private paginationComponent;
    contextMenu: any;
    viewPort: CdkVirtualScrollViewport;
    onContextMenuClick(targetElement: any): void;
    constructor(cdr: ChangeDetectorRef, scrollDispatcher: ScrollDispatcher, styleService: StyleService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    orderBy(column: Columns): void;
    onClick($event: MouseEvent, row: object, key: ColumnKeyType, colIndex: any, rowIndex: number): void;
    onDoubleClick($event: MouseEvent, row: object, key: ColumnKeyType, colIndex: any, rowIndex: number): void;
    onCheckboxSelect($event: object, row: object, rowIndex: number): void;
    onRadioSelect($event: object, row: object, rowIndex: number): void;
    onSelectAll(): void;
    onSearch($event: Array<{
        key: string;
        value: string;
    }>): void;
    onGlobalSearch(value: string): void;
    onPagination(pagination: PaginationRange): void;
    toggleCheckbox(rowIndex: number): void;
    collapseRow(rowIndex: number): void;
    private doDecodePersistedState;
    isRowCollapsed(rowIndex: number): boolean;
    get loadingHeight(): number;
    get arrowDefinition(): boolean;
    onRowContextMenu($event: MouseEvent, row: object, key: ColumnKeyType, colIndex: any, rowIndex: number): void;
    private doApplyData;
    onDrop(event: CdkDragDrop<string[]>): void;
    apiEvent(event: ApiType): void | number;
    private bindApi;
    private setColumnOrder;
    emitEvent(event: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BaseComponent, "ngx-table", never, { "id": "id"; "toggleRowIndex": "toggleRowIndex"; "data": "data"; "configuration": "configuration"; "pagination": "pagination"; "groupRowsBy": "groupRowsBy"; "detailsTemplate": "detailsTemplate"; "summaryTemplate": "summaryTemplate"; "groupRowsHeaderTemplate": "groupRowsHeaderTemplate"; "filtersTemplate": "filtersTemplate"; "selectAllTemplate": "selectAllTemplate"; "noResultsTemplate": "noResultsTemplate"; "loadingTemplate": "loadingTemplate"; "additionalActionsTemplate": "additionalActionsTemplate"; "rowContextMenu": "rowContextMenu"; "columns": "columns"; }, { "event": "event"; }, ["rowTemplate"], never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtEcmFnRHJvcCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9kcmFnLWRyb3AnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwaVR5cGUsIENvbHVtbnMsIENvbmZpZywgUGFnaW5hdGlvbiB9IGZyb20gJy4uLy4uJztcbmltcG9ydCB7IFBhZ2luYXRpb25SYW5nZSB9IGZyb20gJy4uL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3R5bGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc3R5bGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQsIFNjcm9sbERpc3BhdGNoZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmRlY2xhcmUgdHlwZSBDb2x1bW5LZXlUeXBlID0gc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcbmludGVyZmFjZSBSb3dDb250ZXh0TWVudVBvc2l0aW9uIHtcbiAgICB0b3A6IHN0cmluZyB8IG51bGw7XG4gICAgbGVmdDogc3RyaW5nIHwgbnVsbDtcbiAgICB2YWx1ZTogYW55IHwgbnVsbDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNkcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNjcm9sbERpc3BhdGNoZXI7XG4gICAgcmVhZG9ubHkgc3R5bGVTZXJ2aWNlOiBTdHlsZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZTtcbiAgICBzZWxlY3RlZFJvdzogbnVtYmVyO1xuICAgIHNlbGVjdGVkQ29sOiBudW1iZXI7XG4gICAgdGVybTogYW55O1xuICAgIGZpbHRlckNvdW50OiBudW1iZXI7XG4gICAgZmlsdGVyZWRDb3VudFN1YmplY3Q6IFN1YmplY3Q8bnVtYmVyPjtcbiAgICB0YWJsZUNsYXNzOiBzdHJpbmcgfCBudWxsO1xuICAgIGdsb2JhbFNlYXJjaFRlcm06IHN0cmluZztcbiAgICBncm91cGVkOiBhbnk7XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcbiAgICBwYWdlOiBudW1iZXI7XG4gICAgY291bnQ6IG51bWJlcjtcbiAgICBzb3J0U3RhdGU6IE1hcDxhbnksIGFueT47XG4gICAgc29ydEtleTogc3RyaW5nIHwgbnVsbDtcbiAgICByb3dDb250ZXh0TWVudVBvc2l0aW9uOiBSb3dDb250ZXh0TWVudVBvc2l0aW9uO1xuICAgIGxpbWl0OiBhbnk7XG4gICAgc29ydEJ5OiB7XG4gICAgICAgIGtleTogc3RyaW5nO1xuICAgIH0gJiB7XG4gICAgICAgIG9yZGVyOiBzdHJpbmc7XG4gICAgfTtcbiAgICBzZWxlY3RlZERldGFpbHNUZW1wbGF0ZVJvd0lkOiBTZXQ8bnVtYmVyPjtcbiAgICBzZWxlY3RlZENoZWNrYm94ZXM6IFNldDxudW1iZXI+O1xuICAgIGNvbmZpZzogQ29uZmlnO1xuICAgIGNvbmZpZ3VyYXRpb246IENvbmZpZztcbiAgICBkYXRhOiBhbnlbXTtcbiAgICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uO1xuICAgIGdyb3VwUm93c0J5OiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgICB0b2dnbGVSb3dJbmRleDogYW55O1xuICAgIGRldGFpbHNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBzdW1tYXJ5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPHtcbiAgICAgICAgdG90YWw6IG51bWJlcjtcbiAgICAgICAgbGltaXQ6IG51bWJlcjtcbiAgICAgICAgcGFnZTogbnVtYmVyO1xuICAgIH0+O1xuICAgIGdyb3VwUm93c0hlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGZpbHRlcnNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBzZWxlY3RBbGxUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBub1Jlc3VsdHNUZW1wbGF0ZTogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgbG9hZGluZ1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICBhZGRpdGlvbmFsQWN0aW9uc1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICByb3dDb250ZXh0TWVudTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjb2x1bW5zOiBDb2x1bW5zW107XG4gICAgcmVhZG9ubHkgZXZlbnQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGV2ZW50OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBhbnk7XG4gICAgfT47XG4gICAgcm93VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcHJpdmF0ZSBwYWdpbmF0aW9uQ29tcG9uZW50O1xuICAgIGNvbnRleHRNZW51OiBhbnk7XG4gICAgdmlld1BvcnQ6IENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydDtcbiAgICBvbkNvbnRleHRNZW51Q2xpY2sodGFyZ2V0RWxlbWVudDogYW55KTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmLCBzY3JvbGxEaXNwYXRjaGVyOiBTY3JvbGxEaXNwYXRjaGVyLCBzdHlsZVNlcnZpY2U6IFN0eWxlU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG9yZGVyQnkoY29sdW1uOiBDb2x1bW5zKTogdm9pZDtcbiAgICBvbkNsaWNrKCRldmVudDogTW91c2VFdmVudCwgcm93OiBvYmplY3QsIGtleTogQ29sdW1uS2V5VHlwZSwgY29sSW5kZXg6IGFueSwgcm93SW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgb25Eb3VibGVDbGljaygkZXZlbnQ6IE1vdXNlRXZlbnQsIHJvdzogb2JqZWN0LCBrZXk6IENvbHVtbktleVR5cGUsIGNvbEluZGV4OiBhbnksIHJvd0luZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIG9uQ2hlY2tib3hTZWxlY3QoJGV2ZW50OiBvYmplY3QsIHJvdzogb2JqZWN0LCByb3dJbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBvblJhZGlvU2VsZWN0KCRldmVudDogb2JqZWN0LCByb3c6IG9iamVjdCwgcm93SW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgb25TZWxlY3RBbGwoKTogdm9pZDtcbiAgICBvblNlYXJjaCgkZXZlbnQ6IEFycmF5PHtcbiAgICAgICAga2V5OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfT4pOiB2b2lkO1xuICAgIG9uR2xvYmFsU2VhcmNoKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIG9uUGFnaW5hdGlvbihwYWdpbmF0aW9uOiBQYWdpbmF0aW9uUmFuZ2UpOiB2b2lkO1xuICAgIHRvZ2dsZUNoZWNrYm94KHJvd0luZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGNvbGxhcHNlUm93KHJvd0luZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgZG9EZWNvZGVQZXJzaXN0ZWRTdGF0ZTtcbiAgICBpc1Jvd0NvbGxhcHNlZChyb3dJbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBnZXQgbG9hZGluZ0hlaWdodCgpOiBudW1iZXI7XG4gICAgZ2V0IGFycm93RGVmaW5pdGlvbigpOiBib29sZWFuO1xuICAgIG9uUm93Q29udGV4dE1lbnUoJGV2ZW50OiBNb3VzZUV2ZW50LCByb3c6IG9iamVjdCwga2V5OiBDb2x1bW5LZXlUeXBlLCBjb2xJbmRleDogYW55LCByb3dJbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBwcml2YXRlIGRvQXBwbHlEYXRhO1xuICAgIG9uRHJvcChldmVudDogQ2RrRHJhZ0Ryb3A8c3RyaW5nW10+KTogdm9pZDtcbiAgICBhcGlFdmVudChldmVudDogQXBpVHlwZSk6IHZvaWQgfCBudW1iZXI7XG4gICAgcHJpdmF0ZSBiaW5kQXBpO1xuICAgIHByaXZhdGUgc2V0Q29sdW1uT3JkZXI7XG4gICAgZW1pdEV2ZW50KGV2ZW50OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkO1xufVxuZXhwb3J0IHt9O1xuIl19