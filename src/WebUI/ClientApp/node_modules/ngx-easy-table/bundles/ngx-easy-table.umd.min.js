!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/common"),require("@angular/core"),require("@angular/cdk/drag-drop"),require("ngx-pagination"),require("rxjs"),require("rxjs/operators"),require("@angular/cdk/scrolling")):"function"==typeof define&&define.amd?define("ngx-easy-table",["exports","@angular/common","@angular/core","@angular/cdk/drag-drop","ngx-pagination","rxjs","rxjs/operators","@angular/cdk/scrolling"],n):n((e=e||self)["ngx-easy-table"]={},e.ng.common,e.ng.core,e.ng.cdk["drag-drop"],e.ngxPagination,e.rxjs,e.rxjs.operators,e.ng.cdk.scrolling)}(this,(function(e,n,t,o,i,a,l,r){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */var s,c,g,d,p=function(){return(p=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e}).apply(this,arguments)};function u(e,n,t,o){var i,a=arguments.length,l=a<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,o);else for(var r=e.length-1;r>=0;r--)(i=e[r])&&(l=(a<3?i(l):a>3?i(n,t,l):i(n,t))||l);return a>3&&l&&Object.defineProperty(n,t,l),l}function h(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)}function f(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var o,i,a=t.call(e),l=[];try{for(;(void 0===n||n-- >0)&&!(o=a.next()).done;)l.push(o.value)}catch(e){i={error:e}}finally{try{o&&!o.done&&(t=a.return)&&t.call(a)}finally{if(i)throw i.error}}return l}function m(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(f(arguments[n]));return e}(s=e.STYLE||(e.STYLE={})).TINY="tiny",s.BIG="big",s.NORMAL="normal",(c=e.THEME||(e.THEME={})).LIGHT="light",c.DARK="dark",(g=e.Event||(e.Event={})).onPagination="onPagination",g.onOrder="onOrder",g.onGlobalSearch="onGlobalSearch",g.onSearch="onSearch",g.onClick="onClick",g.onDoubleClick="onDoubleClick",g.onCheckboxSelect="onCheckboxSelect",g.onRadioSelect="onRadioSelect",g.onCheckboxToggle="onCheckboxToggle",g.onSelectAll="onSelectAll",g.onInfiniteScrollEnd="onInfiniteScrollEnd",g.onColumnResizeMouseDown="onColumnResizeMouseDown",g.onColumnResizeMouseUp="onColumnResizeMouseUp",g.onRowDrop="onRowDrop",g.onRowCollapsedShow="onRowCollapsedShow",g.onRowCollapsedHide="onRowCollapsedHide",g.onRowContextMenu="onRowContextMenu",(d=e.API||(e.API={})).rowContextMenuClicked="rowContextMenuClicked",d.setInputValue="setInputValue",d.toolPanelClicked="toolPanelClicked",d.toggleRowIndex="toggleRowIndex",d.toggleCheckbox="toggleCheckbox",d.onGlobalSearch="onGlobalSearch",d.setPaginationCurrentPage="setPaginationCurrentPage",d.getPaginationCurrentPage="getPaginationCurrentPage",d.getPaginationTotalItems="getPaginationTotalItems",d.getNumberOfRowsPerPage="getNumberOfRowsPerPage",d.getPaginationLastPage="getPaginationLastPage",d.setPaginationRange="setPaginationRange",d.setPaginationPreviousLabel="setPaginationPreviousLabel",d.setPaginationNextLabel="setPaginationNextLabel",d.setPaginationDisplayLimit="setPaginationDisplayLimit",d.setTableClass="setTableClass",d.setRowClass="setRowClass",d.setCellClass="setCellClass",d.setRowStyle="setRowStyle",d.setCellStyle="setCellStyle",d.sortBy="sortBy";var y={searchEnabled:!1,headerEnabled:!0,orderEnabled:!0,orderEventOnly:!1,paginationEnabled:!0,exportEnabled:!1,clickEvent:!0,selectRow:!1,selectCol:!1,selectCell:!1,rows:10,additionalActions:!1,serverPagination:!1,isLoading:!1,detailsTemplate:!1,groupRows:!1,paginationRangeEnabled:!0,collapseAllRows:!1,checkboxes:!1,radio:!1,resizeColumn:!1,fixedColumnWidth:!0,horizontalScroll:!1,draggable:!1,logger:!1,showDetailsArrow:!1,showContextMenu:!1,persistState:!1,paginationMaxSize:5,threeWaySort:!1,tableLayout:{style:e.STYLE.NORMAL,theme:e.THEME.LIGHT,borderless:!1,hover:!0,striped:!1}},b=function(){function e(){}return e.config=y,e=u([t.Injectable()],e)}(),x=function(){function e(){this.updateRange=new t.EventEmitter,this.ranges=[5,10,25,50,100],this.showRange=!1,this.screenReaderPaginationLabel="Pagination",this.screenReaderPageLabel="page",this.screenReaderCurrentLabel="You are on page",this.previousLabel="",this.nextLabel="",this.directionLinks=!0}return e.prototype.onClick=function(e){this.paginationRange&&!this.paginationRange.nativeElement.contains(e)&&(this.showRange=!1)},e.prototype.ngOnChanges=function(e){var n=e.config;n&&n.currentValue&&(this.selectedLimit=this.config.rows)},e.prototype.onPageChange=function(e){this.updateRange.emit({page:e,limit:this.selectedLimit})},e.prototype.changeLimit=function(e,n){n||(this.showRange=!this.showRange),this.selectedLimit=e,this.updateRange.emit({page:1,limit:e})},u([t.ViewChild("paginationDirective",{static:!0}),h("design:type",i.PaginationControlsDirective)],e.prototype,"paginationDirective",void 0),u([t.ViewChild("paginationRange"),h("design:type",Object)],e.prototype,"paginationRange",void 0),u([t.Input(),h("design:type",Object)],e.prototype,"pagination",void 0),u([t.Input(),h("design:type",Object)],e.prototype,"config",void 0),u([t.Input(),h("design:type",Object)],e.prototype,"id",void 0),u([t.Output(),h("design:type",t.EventEmitter)],e.prototype,"updateRange",void 0),u([t.HostListener("document:click",["$event.target"]),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",void 0)],e.prototype,"onClick",null),e=u([t.Component({selector:"pagination",template:'<div class="ngx-pagination-wrapper"\n     [style.display]="config.paginationEnabled ? \'\' : \'none\'"\n     [class.ngx-table__table--dark-pagination-wrapper]="config.tableLayout.theme === \'dark\'">\n  <div class="ngx-pagination-steps">\n    <pagination-template\n      #paginationDirective="paginationApi"\n      id="pagination-controls"\n      [id]="id"\n      [class.ngx-table__table--dark-pagination]="config.tableLayout.theme === \'dark\'"\n      [maxSize]="config.paginationMaxSize || 5"\n      (pageChange)="onPageChange($event)">\n      <ul class="ngx-pagination"\n          role="navigation"\n          [attr.aria-label]="screenReaderPaginationLabel"\n          [class.responsive]="true">\n        <li class="pagination-previous" [class.disabled]="paginationDirective.isFirstPage()" *ngIf="directionLinks">\n          <a tabindex="0" *ngIf="1 < paginationDirective.getCurrent()" (keyup.enter)="paginationDirective.previous()"\n             (click)="paginationDirective.previous()"\n             [attr.aria-label]="previousLabel + \' \' + screenReaderPageLabel">\n            {{ previousLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf="paginationDirective.isFirstPage()">\n                {{ previousLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n        <li class="small-screen">\n          {{ paginationDirective.getCurrent() }} / {{ paginationDirective.getLastPage() }}\n        </li>\n        <li [class.current]="paginationDirective.getCurrent() === page.value"\n            [class.ellipsis]="page.label === \'...\'"\n            *ngFor="let page of paginationDirective.pages">\n          <a tabindex="0" (keyup.enter)="paginationDirective.setCurrent(page.value)"\n             (click)="paginationDirective.setCurrent(page.value)"\n             *ngIf="paginationDirective.getCurrent() !== page.value">\n            <span class="show-for-sr">{{ screenReaderPageLabel }} </span>\n            <span>{{ page.label }}</span>\n          </a>\n          <ng-container *ngIf="paginationDirective.getCurrent() === page.value">\n            <span class="show-for-sr">{{ screenReaderCurrentLabel }} </span>\n            <span>{{ page.label }}</span>\n          </ng-container>\n        </li>\n        <li class="pagination-next" [class.disabled]="paginationDirective.isLastPage()" *ngIf="directionLinks">\n          <a tabindex="0" *ngIf="!paginationDirective.isLastPage()" (keyup.enter)="paginationDirective.next()"\n             (click)="paginationDirective.next()"\n             [attr.aria-label]="nextLabel + \' \' + screenReaderPageLabel">\n            {{ nextLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n          </a>\n          <span *ngIf="paginationDirective.isLastPage()">\n                 {{ nextLabel }} <span class="show-for-sr">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n      </ul>\n    </pagination-template>\n  </div>\n  <div class="ngx-pagination-range"\n       #paginationRange\n       [class.ngx-table__table--dark-pagination-range]="config.tableLayout.theme === \'dark\'"\n       *ngIf="config.paginationRangeEnabled">\n    <div class="ngx-dropdown ngx-pagination-range-dropdown"\n         id="rowAmount">\n      <div class="ngx-btn-group">\n        <div class="ngx-pagination-range-dropdown-button"\n             (click)="showRange = !showRange">\n          {{selectedLimit}} <i class="ngx-icon ngx-icon-arrow-down"></i>\n        </div>\n        <ul class="ngx-menu" *ngIf="showRange">\n          <li class="ngx-pagination-range-dropdown-button-item"\n              [class.ngx-pagination-range--selected]="limit === selectedLimit"\n              (click)="changeLimit(limit, false)"\n              *ngFor="let limit of ranges">\n            <span>{{limit}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush})],e)}(),v=function(){function e(){}return e.doGroupRows=function(e,n){var t=[];return a.from(e).pipe(l.groupBy((function(e){return e[n]})),l.flatMap((function(e){return e.pipe(l.reduce((function(e,n){return m(e,[n])}),[]))}))).subscribe((function(e){return t.push(e)})),t},e=u([t.Injectable()],e)}(),w=function(){function e(){}return e.prototype.setRowClass=function(e){var n="#table > tbody > tr:nth-child("+e.row+")",t=document.querySelector(n);t&&t.classList.add(e.className)},e.prototype.setCellClass=function(e){var n="#table > tbody > tr:nth-child("+e.row+") > td:nth-child("+e.cell+")",t=document.querySelector(n);t&&t.classList.add(e.className)},e.prototype.setRowStyle=function(e){var n="#table > tbody > tr:nth-child("+e.row+")",t=document.querySelector(n);t&&(t.style[e.attr]=e.value)},e.prototype.setCellStyle=function(e){var n="#table > tbody > tr:nth-child("+e.row+") > td:nth-child("+e.cell+")",t=document.querySelector(n);t&&(t.style[e.attr]=e.value)},e.prototype.pinnedWidth=function(e,n){if(e)return 150*n+"px"},e=u([t.Injectable()],e)}(),C=function(){function n(e,n,o){var i=this;this.cdr=e,this.scrollDispatcher=n,this.styleService=o,this.unsubscribe=new a.Subject,this.filterCount=-1,this.filteredCountSubject=new a.Subject,this.tableClass=null,this.grouped=[],this.isSelected=!1,this.page=1,this.count=0,this.sortState=new Map,this.sortKey=null,this.rowContextMenuPosition={top:null,left:null,value:null},this.sortBy={key:"",order:"asc"},this.selectedDetailsTemplateRowId=new Set,this.selectedCheckboxes=new Set,this.id="table",this.event=new t.EventEmitter,this.filteredCountSubject.pipe(l.takeUntil(this.unsubscribe)).subscribe((function(e){setTimeout((function(){i.filterCount=e,i.cdr.detectChanges()}))}))}return n.prototype.onContextMenuClick=function(e){this.contextMenu&&!this.contextMenu.nativeElement.contains(e)&&(this.rowContextMenuPosition={top:null,left:null,value:null})},n.prototype.ngOnInit=function(){this.columns||console.error("[columns] property required!"),this.configuration?this.config=this.configuration:this.config=b.config,this.limit=this.config.rows,this.groupRowsBy&&(this.grouped=v.doGroupRows(this.data,this.groupRowsBy)),this.doDecodePersistedState()},n.prototype.ngOnDestroy=function(){this.unsubscribe.next(),this.unsubscribe.complete()},n.prototype.ngAfterViewInit=function(){var n=this,t=this.config.infiniteScrollThrottleTime?this.config.infiniteScrollThrottleTime:200;this.scrollDispatcher.scrolled().pipe(l.takeUntil(this.unsubscribe),l.throttleTime(t),l.filter((function(e){return!!e&&n.viewPort&&n.viewPort.getRenderedRange().end===n.viewPort.getDataLength()}))).subscribe((function(){n.emitEvent(e.Event.onInfiniteScrollEnd,null)}))},n.prototype.ngOnChanges=function(e){var n=e.configuration,t=e.data,o=e.pagination,i=e.groupRowsBy;if(this.toggleRowIndex=e.toggleRowIndex,n&&n.currentValue&&(this.config=n.currentValue),t&&t.currentValue&&this.doApplyData(t),o&&o.currentValue){var a=o.currentValue,l=a.count,r=a.limit,s=a.offset;this.count=l,this.limit=r,this.page=s}if(i&&i.currentValue&&(this.grouped=v.doGroupRows(this.data,this.groupRowsBy)),this.toggleRowIndex&&this.toggleRowIndex.currentValue){var c=this.toggleRowIndex.currentValue;this.collapseRow(c.index)}},n.prototype.orderBy=function(n){if((void 0===n.orderEnabled||n.orderEnabled)&&(this.sortKey=n.key,this.config.orderEnabled&&""!==this.sortKey)){this.setColumnOrder(this.sortKey),this.config.orderEventOnly||n.orderEventOnly?(this.sortBy.key="",this.sortBy.order=""):(this.sortBy.key=this.sortKey,this.sortBy.order=this.sortState.get(this.sortKey)),this.config.serverPagination||(this.data=m(this.data),this.sortBy=p({},this.sortBy));var t={key:this.sortKey,order:this.sortState.get(this.sortKey)};this.emitEvent(e.Event.onOrder,t)}},n.prototype.onClick=function(n,t,o,i,a){if(this.config.selectRow&&(this.selectedRow=a),this.config.selectCol&&i&&(this.selectedCol=i),this.config.selectCell&&i&&(this.selectedRow=a,this.selectedCol=i),this.config.clickEvent){var l={event:n,row:t,key:o,rowId:a,colId:i};this.emitEvent(e.Event.onClick,l)}},n.prototype.onDoubleClick=function(n,t,o,i,a){var l={event:n,row:t,key:o,rowId:a,colId:i};this.emitEvent(e.Event.onDoubleClick,l)},n.prototype.onCheckboxSelect=function(n,t,o){var i={event:n,row:t,rowId:o};this.emitEvent(e.Event.onCheckboxSelect,i)},n.prototype.onRadioSelect=function(n,t,o){var i={event:n,row:t,rowId:o};this.emitEvent(e.Event.onRadioSelect,i)},n.prototype.onSelectAll=function(){this.isSelected=!this.isSelected,this.emitEvent(e.Event.onSelectAll,this.isSelected)},n.prototype.onSearch=function(n){this.config.serverPagination||(this.term=n),this.emitEvent(e.Event.onSearch,n)},n.prototype.onGlobalSearch=function(n){this.config.serverPagination||(this.globalSearchTerm=n),this.emitEvent(e.Event.onGlobalSearch,n)},n.prototype.onPagination=function(n){this.page=n.page,this.limit=n.limit,this.emitEvent(e.Event.onPagination,n)},n.prototype.toggleCheckbox=function(e){this.selectedCheckboxes.has(e)?this.selectedCheckboxes.delete(e):this.selectedCheckboxes.add(e)},n.prototype.collapseRow=function(n){this.selectedDetailsTemplateRowId.has(n)?(this.selectedDetailsTemplateRowId.delete(n),this.emitEvent(e.Event.onRowCollapsedHide,n)):(this.selectedDetailsTemplateRowId.add(n),this.emitEvent(e.Event.onRowCollapsedShow,n))},n.prototype.doDecodePersistedState=function(){if(this.config.persistState){var n=localStorage.getItem(e.Event.onPagination),t=localStorage.getItem(e.Event.onOrder),o=localStorage.getItem(e.Event.onSearch);if(n&&this.onPagination(JSON.parse(n)),t){var i=JSON.parse(t),a=i.key,l=i.order;this.bindApi({type:e.API.sortBy,value:{column:a,order:l}})}o&&this.bindApi({type:e.API.setInputValue,value:JSON.parse(o)})}},n.prototype.isRowCollapsed=function(e){return!!this.config.collapseAllRows||this.selectedDetailsTemplateRowId.has(e)},Object.defineProperty(n.prototype,"loadingHeight",{get:function(){var e=document.getElementById(this.id);if(e&&e.rows&&e.rows.length>3){var n=this.config.searchEnabled?1:0,t=this.config.headerEnabled?1:0;return(e.rows.length-n-t)*(e.rows[3].offsetHeight-1)-2}return 30},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"arrowDefinition",{get:function(){return this.config.showDetailsArrow||void 0===this.config.showDetailsArrow},enumerable:!0,configurable:!0}),n.prototype.onRowContextMenu=function(n,t,o,i,a){if(this.config.showContextMenu){n.preventDefault();var l={event:n,row:t,key:o,rowId:a,colId:i};this.rowContextMenuPosition={top:n.y-10+"px",left:n.x-10+"px",value:l},this.emitEvent(e.Event.onRowContextMenu,l)}},n.prototype.doApplyData=function(e){var n=this.columns.find((function(e){return!!e.orderBy}));n?(this.sortState.set(this.sortKey,"asc"===n.orderBy?"desc":"asc"),this.orderBy(n)):this.data=m(e.currentValue)},n.prototype.onDrop=function(n){this.emitEvent(e.Event.onRowDrop,n),o.moveItemInArray(this.data,n.previousIndex,n.currentIndex)},n.prototype.apiEvent=function(e){return this.bindApi(e)},n.prototype.bindApi=function(n){var t=this;switch(n.type){case e.API.rowContextMenuClicked:this.rowContextMenuPosition={top:null,left:null,value:null};break;case e.API.toolPanelClicked:break;case e.API.toggleRowIndex:this.collapseRow(n.value);break;case e.API.toggleCheckbox:this.toggleCheckbox(n.value);break;case e.API.setInputValue:this.config.searchEnabled&&n.value.forEach((function(e){var n=document.getElementById("search_"+e.key);n?n.value=e.value:console.error("Column '"+e.key+"' not available in the DOM. Have you misspelled a name?")})),this.onSearch(n.value),this.cdr.detectChanges();break;case e.API.onGlobalSearch:this.onGlobalSearch(n.value),this.cdr.detectChanges();break;case e.API.setRowClass:if(Array.isArray(n.value)){n.value.forEach((function(e){return t.styleService.setRowClass(e)}));break}this.styleService.setRowClass(n.value),this.cdr.detectChanges();break;case e.API.setCellClass:if(Array.isArray(n.value)){n.value.forEach((function(e){return t.styleService.setCellClass(e)}));break}this.styleService.setCellClass(n.value);break;case e.API.setRowStyle:if(Array.isArray(n.value)){n.value.forEach((function(e){return t.styleService.setRowStyle(e)}));break}this.styleService.setRowStyle(n.value);break;case e.API.setCellStyle:if(Array.isArray(n.value)){n.value.forEach((function(e){return t.styleService.setCellStyle(e)}));break}this.styleService.setCellStyle(n.value);break;case e.API.setTableClass:this.tableClass=n.value,this.cdr.detectChanges();break;case e.API.getPaginationTotalItems:return this.paginationComponent.paginationDirective.getTotalItems();case e.API.getPaginationCurrentPage:return this.paginationComponent.paginationDirective.getCurrent();case e.API.getPaginationLastPage:return this.paginationComponent.paginationDirective.getLastPage();case e.API.getNumberOfRowsPerPage:return this.paginationComponent.paginationDirective.isLastPage()?this.paginationComponent.paginationDirective.getTotalItems()%this.limit:this.limit;case e.API.setPaginationCurrentPage:this.paginationComponent.paginationDirective.setCurrent(n.value);break;case e.API.setPaginationRange:this.paginationComponent.ranges=n.value;break;case e.API.setPaginationPreviousLabel:this.paginationComponent.previousLabel=n.value;break;case e.API.setPaginationNextLabel:this.paginationComponent.nextLabel=n.value;break;case e.API.setPaginationDisplayLimit:this.paginationComponent.changeLimit(n.value,!0);break;case e.API.sortBy:var o={title:"",key:n.value.column,orderBy:n.value.order};this.orderBy(o),this.cdr.detectChanges()}},n.prototype.setColumnOrder=function(e){switch(this.sortState.get(e)){case"":case void 0:this.sortState.set(e,"desc");break;case"asc":this.config.threeWaySort?this.sortState.set(e,""):this.sortState.set(e,"desc");break;case"desc":this.sortState.set(e,"asc")}if(this.sortState.size>1){var n=this.sortState.get(e);this.sortState.clear(),this.sortState.set(e,n)}},n.prototype.emitEvent=function(e,n){this.event.emit({event:e,value:n}),this.config.persistState&&localStorage.setItem(e,JSON.stringify(n)),this.config.logger&&console.log({event:e,value:n})},n.ctorParameters=function(){return[{type:t.ChangeDetectorRef},{type:r.ScrollDispatcher},{type:w}]},u([t.Input(),h("design:type",Object)],n.prototype,"configuration",void 0),u([t.Input(),h("design:type",Array)],n.prototype,"data",void 0),u([t.Input(),h("design:type",Object)],n.prototype,"pagination",void 0),u([t.Input(),h("design:type",String)],n.prototype,"groupRowsBy",void 0),u([t.Input(),h("design:type",Object)],n.prototype,"id",void 0),u([t.Input(),h("design:type",Object)],n.prototype,"toggleRowIndex",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"detailsTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"summaryTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"groupRowsHeaderTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"filtersTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"selectAllTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"noResultsTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"loadingTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"additionalActionsTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"rowContextMenu",void 0),u([t.Input(),h("design:type",Array)],n.prototype,"columns",void 0),u([t.Output(),h("design:type",Object)],n.prototype,"event",void 0),u([t.ContentChild(t.TemplateRef,{static:!0}),h("design:type",t.TemplateRef)],n.prototype,"rowTemplate",void 0),u([t.ViewChild("paginationComponent"),h("design:type",x)],n.prototype,"paginationComponent",void 0),u([t.ViewChild("contextMenu"),h("design:type",Object)],n.prototype,"contextMenu",void 0),u([t.ViewChild(r.CdkVirtualScrollViewport),h("design:type",r.CdkVirtualScrollViewport)],n.prototype,"viewPort",void 0),u([t.HostListener("document:click",["$event.target"]),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",void 0)],n.prototype,"onContextMenuClick",null),n=u([t.Component({selector:"ngx-table",providers:[b,v,w],template:'<div class="ngx-container">\n  <table\n    [id]="id"\n    [ngClass]="tableClass === null || tableClass === \'\' ? \'ngx-table\' : tableClass"\n    [class.ngx-table__table--tiny]="config.tableLayout.style === \'tiny\'"\n    [class.ngx-table__table--normal]="config.tableLayout.style === \'normal\'"\n    [class.ngx-table__table--big]="config.tableLayout.style === \'big\'"\n    [class.ngx-table__table--borderless]="config.tableLayout.borderless"\n    [class.ngx-table__table--dark]="config.tableLayout.theme === \'dark\'"\n    [class.ngx-table__table--hoverable]="config.tableLayout.hover"\n    [class.ngx-table__table--striped]="config.tableLayout.striped"\n    [class.ngx-table__horizontal-scroll]="config.horizontalScroll && !config.isLoading"\n  >\n    <thead\n      [class.ngx-infinite-scroll-viewport-thead]="config.infiniteScroll"\n      table-thead\n      [config]="config"\n      [sortKey]="sortKey"\n      [sortState]="sortState"\n      [selectAllTemplate]="selectAllTemplate"\n      [filtersTemplate]="filtersTemplate"\n      [additionalActionsTemplate]="additionalActionsTemplate"\n      [columns]="columns"\n      (selectAll)="onSelectAll()"\n      (filter)="onSearch($event)"\n      (order)="orderBy($event)"\n      (event)="emitEvent($event.event, $event.value)"\n    ></thead>\n    <tbody *ngIf="data && !config.isLoading && !config.rowReorder">\n      <ng-container *ngIf="rowTemplate">\n        <ul\n          class="ngx-table__table-row-context-menu"\n          [ngStyle]="{\n            position: \'absolute\',\n            top: rowContextMenuPosition.top,\n            left: rowContextMenuPosition.left\n          }"\n          *ngIf="rowContextMenuPosition.top"\n        >\n          <ng-container\n            [ngTemplateOutlet]="rowContextMenu"\n            [ngTemplateOutletContext]="{ $implicit: rowContextMenuPosition.value }"\n          >\n          </ng-container>\n        </ul>\n        <ng-container *ngIf="!config.infiniteScroll">\n          <ng-container\n            *ngFor="\n              let row of data\n                | sort: sortBy\n                | search: term:filteredCountSubject\n                | global: globalSearchTerm:filteredCountSubject\n                | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n              let rowIndex = index\n            "\n          >\n            <tr\n              (click)="onClick($event, row, \'\', null, rowIndex)"\n              #contextMenu\n              (contextmenu)="onRowContextMenu($event, row, \'\', null, rowIndex)"\n              (dblclick)="onDoubleClick($event, row, \'\', null, rowIndex)"\n              [class.ngx-table__table-row--selected]="\n                rowIndex === selectedRow && !config.selectCell\n              "\n            >\n              <ng-container\n                [ngTemplateOutlet]="rowTemplate"\n                [ngTemplateOutletContext]="{ $implicit: row, index: rowIndex }"\n              >\n              </ng-container>\n              <td *ngIf="config.detailsTemplate">\n                <span\n                  class="ngx-icon"\n                  *ngIf="arrowDefinition"\n                  [ngClass]="\n                    isRowCollapsed(rowIndex) ? \'ngx-icon-arrow-down\' : \'ngx-icon-arrow-right\'\n                  "\n                  (click)="collapseRow(rowIndex)"\n                >\n                </span>\n              </td>\n            </tr>\n            <tr\n              *ngIf="\n                (config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) ||\n                config.collapseAllRows\n              "\n            >\n              <td [attr.colspan]="columns.length + 1">\n                <ng-container\n                  [ngTemplateOutlet]="detailsTemplate"\n                  [ngTemplateOutletContext]="{ $implicit: row, index: rowIndex }"\n                >\n                </ng-container>\n              </td>\n            </tr>\n          </ng-container>\n        </ng-container>\n        <cdk-virtual-scroll-viewport\n          itemSize="50"\n          *ngIf="config.infiniteScroll"\n          class="ngx-infinite-scroll-viewport"\n        >\n          <ng-container\n            *cdkVirtualFor="\n              let row of data\n                | sort: sortBy\n                | search: term:filteredCountSubject\n                | global: globalSearchTerm:filteredCountSubject;\n              let rowIndex = index\n            "\n          >\n            <tr\n              (click)="onClick($event, row, \'\', null, rowIndex)"\n              #contextMenu\n              (contextmenu)="onRowContextMenu($event, row, \'\', null, rowIndex)"\n              (dblclick)="onDoubleClick($event, row, \'\', null, rowIndex)"\n              [class.ngx-table__table-row--selected]="\n                rowIndex === selectedRow && !config.selectCell\n              "\n            >\n              <ng-container\n                [ngTemplateOutlet]="rowTemplate"\n                [ngTemplateOutletContext]="{ $implicit: row, index: rowIndex }"\n              >\n              </ng-container>\n              <td *ngIf="config.detailsTemplate">\n                <span\n                  class="ngx-icon"\n                  *ngIf="arrowDefinition"\n                  [ngClass]="\n                    isRowCollapsed(rowIndex) ? \'ngx-icon-arrow-down\' : \'ngx-icon-arrow-right\'\n                  "\n                  (click)="collapseRow(rowIndex)"\n                >\n                </span>\n              </td>\n            </tr>\n            <tr\n              *ngIf="\n                (config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) ||\n                config.collapseAllRows\n              "\n            >\n              <td [attr.colspan]="columns.length + 1">\n                <ng-container\n                  [ngTemplateOutlet]="detailsTemplate"\n                  [ngTemplateOutletContext]="{ $implicit: row, index: rowIndex }"\n                >\n                </ng-container>\n              </td>\n            </tr>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n      </ng-container>\n      <ng-container *ngIf="!rowTemplate && !config.groupRows">\n        <ul\n          class="ngx-table__table-row-context-menu"\n          [ngStyle]="{\n            position: \'absolute\',\n            top: rowContextMenuPosition.top,\n            left: rowContextMenuPosition.left\n          }"\n          *ngIf="rowContextMenuPosition.top"\n        >\n          <ng-container\n            [ngTemplateOutlet]="rowContextMenu"\n            [ngTemplateOutletContext]="{ $implicit: rowContextMenuPosition.value }"\n          >\n          </ng-container>\n        </ul>\n        <ng-container *ngIf="!config.infiniteScroll">\n          <ng-container\n            *ngFor="\n              let row of data\n                | sort: sortBy\n                | search: term:filteredCountSubject\n                | global: globalSearchTerm:filteredCountSubject\n                | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n              let rowIndex = index\n            "\n          >\n            <tr\n              [class.ngx-table__table-row--selected]="\n                rowIndex === selectedRow && !config.selectCell\n              "\n            >\n              <td *ngIf="config.checkboxes">\n                <label class="ngx-form-checkbox">\n                  <input\n                    type="checkbox"\n                    id="checkbox-{{ rowIndex }}"\n                    [checked]="isSelected || selectedCheckboxes.has(rowIndex)"\n                    (change)="onCheckboxSelect($event, row, rowIndex)"\n                  />\n                  <em class="ngx-form-icon"></em>\n                </label>\n              </td>\n              <td *ngIf="config.radio">\n                <label>\n                  <input\n                    type="radio"\n                    id="radio-{{ rowIndex }}"\n                    name="radio"\n                    (change)="onRadioSelect($event, row, rowIndex)"\n                  />\n                </label>\n              </td>\n              <ng-container *ngFor="let column of columns; let colIndex = index">\n                <td\n                  (click)="onClick($event, row, column.key, colIndex, rowIndex)"\n                  #contextMenu\n                  (contextmenu)="onRowContextMenu($event, row, column.key, colIndex, rowIndex)"\n                  (dblclick)="onDoubleClick($event, row, column.key, colIndex, rowIndex)"\n                  [class.pinned-left]="column.pinned"\n                  [ngClass]="column.cssClass ? column.cssClass.name : \'\'"\n                  [style.left]="styleService.pinnedWidth(column.pinned, colIndex)"\n                  [class.ngx-table__table-col--selected]="\n                    colIndex === selectedCol && !config.selectCell\n                  "\n                  [class.ngx-table__table-cell--selected]="\n                    colIndex === selectedCol &&\n                    rowIndex === selectedRow &&\n                    !config.selectCol &&\n                    !config.selectRow\n                  "\n                >\n                  <div *ngIf="!column.cellTemplate">{{ row | render: column.key }}</div>\n                  <ng-container\n                    *ngIf="column.cellTemplate"\n                    [ngTemplateOutlet]="column.cellTemplate"\n                    [ngTemplateOutletContext]="{\n                      $implicit: row,\n                      rowIndex: rowIndex,\n                      column: column\n                    }"\n                  >\n                  </ng-container>\n                </td>\n              </ng-container>\n              <td *ngIf="config.additionalActions || config.detailsTemplate">\n                <span\n                  class="ngx-icon"\n                  *ngIf="arrowDefinition"\n                  [ngClass]="\n                    isRowCollapsed(rowIndex) ? \'ngx-icon-arrow-down\' : \'ngx-icon-arrow-right\'\n                  "\n                  (click)="collapseRow(rowIndex)"\n                >\n                </span>\n              </td>\n            </tr>\n            <tr\n              *ngIf="\n                (config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) ||\n                config.collapseAllRows\n              "\n            >\n              <td *ngIf="config.checkboxes || config.radio"></td>\n              <td [attr.colspan]="columns.length + 1">\n                <ng-container\n                  [ngTemplateOutlet]="detailsTemplate"\n                  [ngTemplateOutletContext]="{ $implicit: row, index: rowIndex }"\n                >\n                </ng-container>\n              </td>\n            </tr>\n          </ng-container>\n        </ng-container>\n        \x3c!-- infinite scroll --\x3e\n        <cdk-virtual-scroll-viewport\n          itemSize="50"\n          *ngIf="config.infiniteScroll"\n          class="ngx-infinite-scroll-viewport"\n        >\n          <ng-container\n            *cdkVirtualFor="\n              let row of data\n                | sort: sortBy\n                | search: term:filteredCountSubject\n                | global: globalSearchTerm:filteredCountSubject;\n              let rowIndex = index\n            "\n          >\n            <tr\n              [class.ngx-table__table-row--selected]="\n                rowIndex === selectedRow && !config.selectCell\n              "\n            >\n              <td *ngIf="config.checkboxes">\n                <label class="ngx-form-checkbox">\n                  <input\n                    type="checkbox"\n                    id="checkbox-infinite-scroll-{{ rowIndex }}"\n                    [checked]="isSelected || selectedCheckboxes.has(rowIndex)"\n                    (change)="onCheckboxSelect($event, row, rowIndex)"\n                  />\n                  <em class="ngx-form-icon"></em>\n                </label>\n              </td>\n              <td *ngIf="config.radio">\n                <label>\n                  <input\n                    type="radio"\n                    id="radio-infinite-scroll-{{ rowIndex }}"\n                    name="radio"\n                    (change)="onRadioSelect($event, row, rowIndex)"\n                  />\n                </label>\n              </td>\n              <ng-container *ngFor="let column of columns; let colIndex = index">\n                <td\n                  (click)="onClick($event, row, column.key, colIndex, rowIndex)"\n                  #contextMenu\n                  (contextmenu)="onRowContextMenu($event, row, column.key, colIndex, rowIndex)"\n                  (dblclick)="onDoubleClick($event, row, column.key, colIndex, rowIndex)"\n                  [class.pinned-left]="column.pinned"\n                  [ngClass]="column.cssClass ? column.cssClass.name : \'\'"\n                  [style.left]="styleService.pinnedWidth(column.pinned, colIndex)"\n                  [class.ngx-table__table-col--selected]="\n                    colIndex === selectedCol && !config.selectCell\n                  "\n                  [class.ngx-table__table-cell--selected]="\n                    colIndex === selectedCol &&\n                    rowIndex === selectedRow &&\n                    !config.selectCol &&\n                    !config.selectRow\n                  "\n                >\n                  <div *ngIf="!column.cellTemplate">{{ row | render: column.key }}</div>\n                  <ng-container\n                    *ngIf="column.cellTemplate"\n                    [ngTemplateOutlet]="column.cellTemplate"\n                    [ngTemplateOutletContext]="{\n                      $implicit: row,\n                      rowIndex: rowIndex,\n                      column: column\n                    }"\n                  >\n                  </ng-container>\n                </td>\n              </ng-container>\n              <td *ngIf="config.additionalActions || config.detailsTemplate">\n                <span\n                  class="ngx-icon"\n                  *ngIf="arrowDefinition"\n                  [ngClass]="\n                    isRowCollapsed(rowIndex) ? \'ngx-icon-arrow-down\' : \'ngx-icon-arrow-right\'\n                  "\n                  (click)="collapseRow(rowIndex)"\n                >\n                </span>\n              </td>\n            </tr>\n            <tr\n              *ngIf="\n                (config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) ||\n                config.collapseAllRows\n              "\n            >\n              <td *ngIf="config.checkboxes || config.radio"></td>\n              <td [attr.colspan]="columns.length + 1">\n                <ng-container\n                  [ngTemplateOutlet]="detailsTemplate"\n                  [ngTemplateOutletContext]="{ $implicit: row, index: rowIndex }"\n                >\n                </ng-container>\n              </td>\n            </tr>\n          </ng-container>\n        </cdk-virtual-scroll-viewport>\n      </ng-container>\n      <ng-container *ngIf="!rowTemplate && config.groupRows">\n        <ng-container\n          *ngFor="\n            let group of grouped\n              | sort: sortBy:config\n              | search: term:filteredCountSubject:config\n              | global: globalSearchTerm:filteredCountSubject\n              | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n            let rowIndex = index\n          "\n        >\n          <tr>\n            <ng-container *ngIf="!groupRowsHeaderTemplate">\n              <td [attr.colspan]="columns.length">\n                <div>{{ group[0][groupRowsBy] }} ({{ group.length }})</div>\n              </td>\n            </ng-container>\n            <ng-container\n              *ngIf="groupRowsHeaderTemplate"\n              [ngTemplateOutlet]="groupRowsHeaderTemplate"\n              [ngTemplateOutletContext]="{\n                total: group.length,\n                key: groupRowsBy,\n                value: group[0] ? group[0][groupRowsBy] : \'\',\n                group: group,\n                index: rowIndex\n              }"\n            >\n            </ng-container>\n            <td>\n              <span\n                class="ngx-icon"\n                *ngIf="arrowDefinition"\n                [ngClass]="\n                  isRowCollapsed(rowIndex) ? \'ngx-icon-arrow-down\' : \'ngx-icon-arrow-right\'\n                "\n                (click)="collapseRow(rowIndex)"\n              >\n              </span>\n            </td>\n          </tr>\n          <ng-container *ngIf="selectedDetailsTemplateRowId.has(rowIndex)">\n            <tr *ngFor="let row of group">\n              <td *ngFor="let column of columns">\n                {{ row | render: column.key }}\n                \x3c!-- TODO allow users to add groupRowsTemplateRef --\x3e\n              </td>\n              <td></td>\n            </tr>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </tbody>\n    <tbody\n      *ngIf="data && !config.isLoading && config.rowReorder"\n      class="ngx-draggable-row-area"\n      cdkDropList\n      (cdkDropListDropped)="onDrop($event)"\n    >\n      <ng-container *ngIf="!rowTemplate && !config.groupRows">\n        <ng-container\n          *ngFor="\n            let row of data\n              | sort: sortBy\n              | search: term:filteredCountSubject\n              | global: globalSearchTerm:filteredCountSubject\n              | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n            let rowIndex = index\n          "\n        >\n          <tr class="ngx-draggable-row" cdkDrag cdkDragLockAxis="y">\n            <td *ngIf="config.checkboxes">\n              <label class="ngx-form-checkbox">\n                <input\n                  type="checkbox"\n                  id="checkbox-draggable-{{ rowIndex }}"\n                  [checked]="isSelected || selectedCheckboxes.has(rowIndex)"\n                  (change)="onCheckboxSelect($event, row, rowIndex)"\n                />\n                <em class="ngx-form-icon"></em>\n              </label>\n            </td>\n            <td *ngIf="config.radio">\n              <label>\n                <input\n                  type="radio"\n                  id="radio-draggable-{{ rowIndex }}"\n                  name="radio"\n                  (change)="onRadioSelect($event, row, rowIndex)"\n                />\n              </label>\n            </td>\n            <ng-container *ngFor="let column of columns; let colIndex = index">\n              <td\n                (click)="onClick($event, row, column.key, colIndex, rowIndex)"\n                (dblclick)="onDoubleClick($event, row, column.key, colIndex, rowIndex)"\n                [class.ngx-table__table-col--selected]="\n                  colIndex === selectedCol && !config.selectCell\n                "\n                [class.ngx-table__table-cell--selected]="\n                  colIndex === selectedCol &&\n                  rowIndex === selectedRow &&\n                  !config.selectCol &&\n                  !config.selectRow\n                "\n              >\n                <div>{{ row | render: column.key }}</div>\n              </td>\n            </ng-container>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </tbody>\n    <tbody *ngIf="filterCount === 0">\n      <tr class="ngx-table__body-empty">\n        <ng-container *ngIf="noResultsTemplate" [ngTemplateOutlet]="noResultsTemplate">\n        </ng-container>\n        <td [attr.colspan]="columns && columns.length + 1" *ngIf="!noResultsTemplate">\n          <div class="ngx-table__table-no-results">\n            No results\n          </div>\n        </td>\n      </tr>\n    </tbody>\n    <tbody *ngIf="config.isLoading">\n      <tr class="ngx-table__body-loading">\n        <ng-container *ngIf="loadingTemplate" [ngTemplateOutlet]="loadingTemplate"> </ng-container>\n        <td [attr.colspan]="columns && columns.length + 1" *ngIf="!loadingTemplate">\n          <div [style.height.px]="loadingHeight" class="ngx-table__table-loader-wrapper">\n            <div class="ngx-table__table-loader"></div>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n    <tfoot *ngIf="summaryTemplate">\n      <tr>\n        <ng-container\n          [ngTemplateOutlet]="summaryTemplate"\n          [ngTemplateOutletContext]="{ total: data.length, limit: limit, page: page }"\n        >\n        </ng-container>\n      </tr>\n    </tfoot>\n  </table>\n  <pagination\n    [attr.id]="\'pagination\' + id"\n    [id]="id"\n    #paginationComponent\n    [config]="config"\n    [pagination]="pagination"\n    (updateRange)="onPagination($event)"\n  >\n  </pagination>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush}),h("design:paramtypes",[t.ChangeDetectorRef,r.ScrollDispatcher,w])],n)}(),I=function(){function e(){this.update=new t.EventEmitter}return e.prototype.unifyKey=function(e){return e.replace(".","_")},e.prototype.onSearch=function(e){this.update.emit([{value:e.value,key:this.column.key}])},u([t.Input(),h("design:type",Object)],e.prototype,"column",void 0),u([t.Output(),h("design:type",Object)],e.prototype,"update",void 0),e=u([t.Component({selector:"table-header",template:'<label for="search_{{ unifyKey(column.key) }}">\n  <input type="text"\n         id="search_{{ unifyKey(column.key) }}"\n         aria-label="Search"\n         placeholder="{{ column.placeholder ? column.placeholder : column.title }}"\n         class="ngx-table__header-search"\n         #input\n         (input)="onSearch(input)"\n  >\n</label>\n',changeDetection:t.ChangeDetectionStrategy.OnPush})],e)}(),k=function(){function e(){}return e.prototype.transform=function(e,n,t){if(t.next(0),void 0!==e){if(void 0===n||0===Object.keys(n).length||""===n)return t.next(e.length),e;var o=e.filter((function(e){var t=JSON.stringify(Object.values(e));return n.split(",").some((function(e){return t.toLocaleLowerCase().indexOf(e.trim().toLocaleLowerCase())>-1}))}));return t.next(o.length),o}},e=u([t.Pipe({name:"global"})],e)}(),R=function(){function e(){}return e.getPath=function(e,n){return e.reduce((function(e,n){return e&&void 0!==e[n]?e[n]:null}),n)},e=u([t.Injectable()],e)}(),S=function(){function e(){}return e.prototype.transform=function(e,n){var t=n.split(".");return R.getPath(t,e)},e=u([t.Pipe({name:"render"})],e)}(),T=function(){function e(){this.filters={}}return e.prototype.transform=function(e,n,t,o){var i=this;if(t.next(0),void 0!==e)return void 0===n?(t.next(e.length),e):(n.forEach((function(e){i.filters[e.key]=e.value.toString().toLocaleLowerCase(),0!==Object.keys(e).length&&""!==e.value||delete i.filters[e.key]})),o&&o.groupRows?e.map((function(e){return i.filterGroup(e,t)})):this.filterGroup(e,t))},e.prototype.filterGroup=function(e,n){var t=this,o=e.filter((function(e){return Object.keys(t.filters).every((function(n){var o=n.split("."),i=R.getPath(o,e),a="object"==typeof i?JSON.stringify(i):i.toString().toLocaleLowerCase();return t.filters[n].split(",").some((function(e){return a.indexOf(e.trim())>-1}))}))}));return n.next(o.length),o},e=u([t.Pipe({name:"search"})],e)}(),P=function(){function e(){this.defaultArray=[]}var n;return n=e,e.isNaN=function(e,n){return isNaN(parseFloat(e))||!isFinite(e)||isNaN(parseFloat(n))||!isFinite(n)},e.compare=function(e,t,o){var i=o.split("."),a=R.getPath(i,e),l=R.getPath(i,t),r=(a+"").toLowerCase(),s=(l+"").toLowerCase();return n.isNaN(a,l)?r.localeCompare(s):parseFloat(a)<parseFloat(l)?-1:parseFloat(a)>parseFloat(l)?1:0},e.prototype.transform=function(e,n,t){return 0===this.defaultArray.length&&(this.defaultArray=e),n.key&&""!==n.key?""===n.order?this.defaultArray:"asc"===n.order?this.sortAsc(e,n,t):this.sortDesc(e,n,t):e},e.prototype.sortAsc=function(e,t,o){return o&&o.groupRows?e.map((function(e){return e.sort((function(e,o){return n.compare(e,o,t.key)}))})):e.sort((function(e,o){return n.compare(e,o,t.key)}))},e.prototype.sortDesc=function(e,t,o){return o&&o.groupRows?e.map((function(e){return e.sort((function(e,o){return n.compare(o,e,t.key)}))})):e.sort((function(e,o){return n.compare(o,e,t.key)}))},e=n=u([t.Pipe({name:"sort"})],e)}(),A=function(){function n(e){this.styleService=e,this.menuActive=!1,this.openedHeaderActionTemplate=null,this.onSelectAllBinded=this.onSelectAll.bind(this),this.filter=new t.EventEmitter,this.order=new t.EventEmitter,this.selectAll=new t.EventEmitter,this.event=new t.EventEmitter}return n.prototype.onClick=function(e){this.additionalActionMenu&&!this.additionalActionMenu.nativeElement.contains(e)&&(this.menuActive=!1)},n.prototype.getColumnDefinition=function(e){return e.searchEnabled||void 0===e.searchEnabled},n.prototype.orderBy=function(e){this.order.emit(e)},n.prototype.isOrderEnabled=function(e){var n=void 0===e.orderEnabled||!!e.orderEnabled;return this.config.orderEnabled&&n},n.prototype.columnDrop=function(e){o.moveItemInArray(this.columns,e.previousIndex,e.currentIndex)},n.prototype.onSearch=function(e){this.filter.emit(e)},n.prototype.getColumnWidth=function(e){return e.width?e.width:this.config.fixedColumnWidth?100/this.columns.length+"%":null},n.prototype.onSelectAll=function(){this.selectAll.emit()},n.prototype.onMouseDown=function(n,t){this.config.resizeColumn&&(this.th=t,this.startOffset=t.offsetWidth-n.pageX,this.event.emit({event:e.Event.onColumnResizeMouseDown,value:n}))},n.prototype.onMouseMove=function(e){this.config.resizeColumn&&this.th&&this.th.style&&(this.th.style.width=this.startOffset+e.pageX+"px",this.th.style.cursor="col-resize",this.th.style["user-select"]="none")},n.prototype.onMouseUp=function(n){this.config.resizeColumn&&(this.event.emit({event:e.Event.onColumnResizeMouseUp,value:n}),this.th.style.cursor="default",this.th=void 0)},n.prototype.showHeaderActionTemplateMenu=function(e){e.headerActionTemplate||console.error("Column [headerActionTemplate] property not defined"),this.openedHeaderActionTemplate!==e.key?this.openedHeaderActionTemplate=e.key:this.openedHeaderActionTemplate=null},n.prototype.showMenu=function(){this.additionalActionsTemplate||console.error("[additionalActionsTemplate] property not defined"),this.menuActive=!this.menuActive},n.ctorParameters=function(){return[{type:w}]},u([t.Input(),h("design:type",Object)],n.prototype,"config",void 0),u([t.Input(),h("design:type",Array)],n.prototype,"columns",void 0),u([t.Input(),h("design:type",Object)],n.prototype,"sortKey",void 0),u([t.Input(),h("design:type",Object)],n.prototype,"sortState",void 0),u([t.Input(),h("design:type",Object)],n.prototype,"selectAllTemplate",void 0),u([t.Input(),h("design:type",Object)],n.prototype,"filtersTemplate",void 0),u([t.Input(),h("design:type",t.TemplateRef)],n.prototype,"additionalActionsTemplate",void 0),u([t.Output(),h("design:type",Object)],n.prototype,"filter",void 0),u([t.Output(),h("design:type",Object)],n.prototype,"order",void 0),u([t.Output(),h("design:type",Object)],n.prototype,"selectAll",void 0),u([t.Output(),h("design:type",Object)],n.prototype,"event",void 0),u([t.ViewChild("th"),h("design:type",Object)],n.prototype,"th",void 0),u([t.ViewChild("additionalActionMenu"),h("design:type",Object)],n.prototype,"additionalActionMenu",void 0),u([t.HostListener("document:click",["$event.target"]),h("design:type",Function),h("design:paramtypes",[Object]),h("design:returntype",void 0)],n.prototype,"onClick",null),n=u([t.Component({selector:"[table-thead]",template:'<tr class="ngx-table__header" *ngIf="config.headerEnabled && !config.columnReorder">\n  <th *ngIf="config.checkboxes || config.radio" [style.width]="\'3%\'">\n    <ng-container\n      *ngIf="selectAllTemplate && config.checkboxes"\n      [ngTemplateOutlet]="selectAllTemplate"\n      [ngTemplateOutletContext]="{ $implicit: onSelectAllBinded }">\n    </ng-container>\n    <label class="ngx-form-checkbox"\n           for="selectAllCheckboxes"\n           *ngIf="!selectAllTemplate && config.checkboxes">\n      <input type="checkbox" id="selectAllCheckboxes" (change)="onSelectAll()">\n      <em class="ngx-form-icon" id="selectAllCheckbox"></em>\n    </label>\n  </th>\n  <ng-container *ngFor="let column of columns; let colIndex = index; let last = last">\n    <th class="ngx-table__header-cell"\n        [class.pinned-left]="column.pinned"\n        [ngClass]="column.cssClass && column.cssClass.includeHeader ? column.cssClass.name : \'\'"\n        [style.left]="styleService.pinnedWidth(column.pinned, colIndex)"\n        #th\n        [style.width]="getColumnWidth(column)"\n        (mousedown)="onMouseDown($event, th)"\n        (mouseup)="onMouseUp($event)"\n        (mousemove)="onMouseMove($event)">\n      <div (click)="orderBy(column)" style="display: inline" [class.pointer]="isOrderEnabled(column)">\n        <div class="ngx-table__header-title">{{ column.title }}<span>&nbsp;</span>\n          <em class="ngx-icon ngx-icon-pin" *ngIf="column.pinned"></em>\n          <div [style.display]="config.orderEnabled ? \'inline\' : \'none\' ">\n            <em *ngIf="sortKey === column.key && this.sortState.get(sortKey) === \'asc\'"\n               class="ngx-icon ngx-icon-arrow-up">\n            </em>\n            <em *ngIf="sortKey === column.key && this.sortState.get(sortKey) === \'desc\'"\n               class="ngx-icon ngx-icon-arrow-down">\n            </em>\n          </div>\n        </div>\n      </div>\n      <div class="ngx-dropdown"\n           *ngIf="!!column.headerActionTemplate">\n        <a class="ngx-btn ngx-btn-link" (click)="showHeaderActionTemplateMenu(column)">\n          <span class="ngx-icon ngx-icon-more"></span>\n        </a>\n        <div class="ngx-menu ngx-table__table-menu"\n            *ngIf="column.key === openedHeaderActionTemplate">\n          <ng-container\n            [ngTemplateOutlet]="column.headerActionTemplate">\n          </ng-container>\n        </div>\n      </div>\n      <div class="ngx-table__column-resizer" *ngIf="config.resizeColumn && !last"></div>\n    </th>\n  </ng-container>\n  <th *ngIf="config.additionalActions || config.detailsTemplate || config.collapseAllRows || config.groupRows"\n      class="ngx-table__header-cell-additional-actions">\n    <div class="ngx-dropdown"\n         #additionalActionMenu\n         *ngIf="config.additionalActions">\n      <a class="ngx-btn ngx-btn-link" (click)="showMenu()">\n        <span class="ngx-icon ngx-icon-menu"></span>\n      </a>\n      <ul class="ngx-menu ngx-table__table-menu"\n          *ngIf="menuActive">\n        <ng-container\n          *ngIf="additionalActionsTemplate"\n          [ngTemplateOutlet]="additionalActionsTemplate">\n        </ng-container>\n      </ul>\n    </div>\n  </th>\n</tr>\n<tr class="ngx-table__header ngx-table__header--draggable"\n    *ngIf="config.headerEnabled && config.columnReorder"\n    cdkDropList\n    cdkDropListOrientation="horizontal"\n    (cdkDropListDropped)="columnDrop($event)"\n>\n  <th [style.width]="\'3%\'">\n    <ng-container\n      *ngIf="selectAllTemplate && config.checkboxes"\n      [ngTemplateOutlet]="selectAllTemplate"\n      [ngTemplateOutletContext]="{ $implicit: onSelectAllBinded }">\n    </ng-container>\n    <label class="ngx-form-checkbox"\n           for="selectAllCheckboxes"\n           *ngIf="!selectAllTemplate && config.checkboxes">\n      <input type="checkbox" id="selectAllCheckboxesDrag" (change)="onSelectAll()">\n      <em class="ngx-form-icon" id="selectAllCheckboxDrag"></em>\n    </label>\n  </th>\n  <ng-container *ngFor="let column of columns; let colIndex = index; let last = last">\n    <th class="ngx-table__header-cell ngx-table__header-cell--draggable"\n        cdkDragLockAxis="x"\n        cdkDrag\n        [class.pinned-left]="column.pinned"\n        [ngClass]="column.cssClass && column.cssClass.includeHeader ? column.cssClass.name : \'\'"\n        [style.left]="styleService.pinnedWidth(column.pinned, colIndex)"\n        #th\n        [style.width]="getColumnWidth(column)"\n        (mousedown)="onMouseDown($event, th)"\n        (mouseup)="onMouseUp($event)"\n        (mousemove)="onMouseMove($event)">\n      <div (click)="orderBy(column)" style="display: inline"\n           cdkDragHandle\n           [class.pointer]="isOrderEnabled(column)">\n        <div class="ngx-table__header-title">{{ column.title }}<span>&nbsp;</span>\n          <em class="ngx-icon ngx-icon-pin" *ngIf="column.pinned"></em>\n          <div [style.display]="config.orderEnabled ? \'inline\' : \'none\' ">\n            <em *ngIf="sortKey === column.key && this.sortState.get(sortKey) === \'asc\'"\n                class="ngx-icon ngx-icon-arrow-up">\n            </em>\n            <em *ngIf="sortKey === column.key && this.sortState.get(sortKey) === \'desc\'"\n                class="ngx-icon ngx-icon-arrow-down">\n            </em>\n          </div>\n        </div>\n      </div>\n      <div class="ngx-dropdown"\n           *ngIf="!!column.headerActionTemplate">\n        <a class="ngx-btn ngx-btn-link" (click)="showHeaderActionTemplateMenu(column)">\n          <span class="ngx-icon ngx-icon-more"></span>\n        </a>\n        <div class="ngx-menu ngx-table__table-menu"\n             *ngIf="column.key === openedHeaderActionTemplate">\n          <ng-container\n            [ngTemplateOutlet]="column.headerActionTemplate">\n          </ng-container>\n        </div>\n      </div>\n      <div class="ngx-table__column-resizer" *ngIf="config.resizeColumn && !last"></div>\n    </th>\n  </ng-container>\n  <th *ngIf="config.additionalActions || config.detailsTemplate || config.collapseAllRows || config.groupRows"\n      class="ngx-table__header-cell-additional-actions">\n    <div class="ngx-dropdown"\n         #additionalActionMenu\n         *ngIf="config.additionalActions">\n      <a class="ngx-btn ngx-btn-link" (click)="showMenu()">\n        <span class="ngx-icon ngx-icon-menu"></span>\n      </a>\n      <ul class="ngx-menu ngx-table__table-menu"\n          *ngIf="menuActive">\n        <ng-container\n          *ngIf="additionalActionsTemplate"\n          [ngTemplateOutlet]="additionalActionsTemplate">\n        </ng-container>\n      </ul>\n    </div>\n  </th>\n</tr>\n<tr *ngIf="config.searchEnabled && !filtersTemplate"\n    class="ngx-table__sort-header">\n  <th *ngIf="config.checkboxes || config.radio"></th>\n  <ng-container *ngFor="let column of columns; let colIndex = index">\n    <th\n      [ngClass]="column.cssClass && column.cssClass.includeHeader ? column.cssClass.name : \'\'"\n      [class.pinned-left]="column.pinned"\n      [style.left]="styleService.pinnedWidth(column.pinned, colIndex)">\n      <table-header\n        *ngIf="getColumnDefinition(column)"\n        (update)="onSearch($event)"\n        [column]="column">\n      </table-header>\n    </th>\n  </ng-container>\n  <th *ngIf="config.additionalActions || config.detailsTemplate"></th>\n</tr>\n<ng-container *ngIf="filtersTemplate">\n  <tr>\n    <ng-container [ngTemplateOutlet]="filtersTemplate">\n    </ng-container>\n  </tr>\n</ng-container>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,providers:[w],styles:["\n    .cdk-drag-preview {\n      text-align: left;\n      padding-top: 9px;\n      padding-left: 4px;\n      color: #50596c;\n      border: 1px solid #e7e9ed;\n    }\n  "]}),h("design:paramtypes",[w])],n)}(),O=function(){function e(){}return e=u([t.NgModule({declarations:[C,I,x,A,T,S,k,P],imports:[n.CommonModule,i.NgxPaginationModule,o.DragDropModule,r.ScrollingModule],exports:[C]})],e)}(),D=function(){function e(){}return e=u([t.NgModule({imports:[n.CommonModule,O],exports:[C],providers:[]})],e)}();e.BaseComponent=C,e.DefaultConfig=y,e.TableModule=D,e.ɵa=b,e.ɵb=O,e.ɵc=v,e.ɵd=w,e.ɵe=I,e.ɵf=x,e.ɵg=A,e.ɵh=T,e.ɵi=S,e.ɵj=k,e.ɵk=P,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=ngx-easy-table.umd.min.js.map